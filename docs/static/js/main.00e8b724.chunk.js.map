{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/Spinner.js","GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","nameCategory","trim","length","cats","id","shortid","generate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","title","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","className","img","GifGridItem","src","alt","SkChase","styled","div","SkChaseDot","Spinner","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOA4CeA,EAxCK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAAkB,EAEXC,mBAAU,IAFC,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAsBjD,OACI,sBACIC,SAlBa,SAAAC,GACjBA,EAAEC,iBADoB,IAGbC,EAHa,YAGKR,EAHL,MAGbQ,aAELL,EAAWM,OAAOC,OAAS,GAAKP,EAAWM,SAAWD,IAEtDP,GAAa,SAAAU,GAAI,OAAK,CAClBH,aAAcL,EAAWM,OACzBG,GAAIC,IAAQC,aAFC,mBAGXH,OAENP,EAAe,MAKnB,SAGI,uBACIW,KAAK,OACLC,MAAQb,EACRc,SAzBc,SAAAX,GAAC,OAAIF,EAAeE,EAAEY,OAAOF,a,wBCO5CG,EAfF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACNC,EADM,iDACiDC,UAAWH,GAD5D,+DAEYI,MAAOF,GAFnB,cAENG,EAFM,gBAGYA,EAAKC,OAHjB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAK,gBAAGjB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAd,MACnB,CACIT,IAAG,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBV,IAC9BV,KAAIkB,YARA,kBAYLF,GAZK,4CAAH,sDCkCEK,EA7BC,SAAC,GAAsB,IAApBzB,EAAmB,EAAnBA,aAAmB,ECFV,SAAAY,GAAa,IAAD,EAERlB,mBAAS,CACjCyB,KAAM,GACNO,SAAS,IAJuB,mBAE5BC,EAF4B,KAErBC,EAFqB,KAoBpC,OAbAC,qBAAW,WAEPlB,EAASC,GACJkB,MAAM,SAAAC,GAEHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAItB,CAAEd,IAEEe,EDhB0BK,CAAchC,GAAlCuB,EAFqB,EAE1BJ,KAAaO,EAFa,EAEbA,QAErB,OACI,qCACI,oBAAIO,UAAU,oCAAd,SAAoDjC,IAElD0B,GAAW,cAAC,EAAD,IAEb,qBAAKO,UAAU,YAAf,SAEQV,EAAOF,KAAK,SAAAa,GAAG,OACX,cAAC,EAAD,aAEIlC,aAAeA,GACVkC,GAFCA,EAAI9B,aEEvB+B,EAlBK,SAAC,GAAkC,IAAhCb,EAA+B,EAA/BA,MAAOR,EAAwB,EAAxBA,IAAKd,EAAmB,EAAnBA,aAI/B,OAFAsB,EAA2B,KAAjBA,EAAMrB,OAAR,UAA8BD,EAA9B,QAAoDsB,EAGxD,sBAAKW,UAAU,yCAAf,UACI,qBAAKG,IAAMtB,EAAMuB,IAAMf,IACvB,4BAAKA,Q,+sDCPjB,IAAMgB,EAAUC,IAAOC,IAAV,KAYPC,EAAaF,IAAOC,IAAV,KAwEDE,EAXC,kBACZ,eAACJ,EAAD,WACI,cAACG,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,QC/COE,EAhCM,WAAO,IAAD,EAEUjD,mBAAS,CAAC,CAC7CM,aAAc,YACdI,GAAIC,IAAQC,cAJa,mBAElBd,EAFkB,KAENC,EAFM,KAO1B,OACC,qCACC,8CAEA,cAAC,EAAD,CACCD,WAAaA,EACbC,YAAcA,IAGf,uBAEA,6BAEED,EAAW6B,KAAK,SAAAT,GAAQ,OACvB,cAAC,EAAD,eAEMA,GADCA,EAASR,aCrBtBwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.00e8b724.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nconst AddCategory = ({ categories, setCategory }) => {\r\n    \r\n    const [ inputValue, setInputValue ] = useState( '' );\r\n\r\n    const handleInputChange = e => setInputValue( e.target.value );\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n    \r\n        const [{ nameCategory }] = categories;\r\n\r\n        if( inputValue.trim().length > 2 && inputValue.trim() !== nameCategory ) {\r\n\r\n            setCategory( cats => [{\r\n                nameCategory: inputValue.trim(),\r\n                id: shortid.generate()\r\n            }, ...cats ] );\r\n\r\n            setInputValue( '' );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form\r\n            onSubmit={ handleSubmit }\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    categories: PropTypes.array.isRequired,\r\n    setCategory: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;","const getGifs = async category => {\r\n    const url       = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=oPLaZHexmz9uvLIHl8olW3ltjyRiZ8o9`;\r\n    const resp      = await fetch( url );\r\n    const { data }  = await resp.json();\r\n\r\n    const gifs = data.map( ({ id, title, images }) => (\r\n        { \r\n            url: images?.downsized_medium.url,\r\n            id, title\r\n        }\r\n    ));\r\n\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem, Spinner } from './';\r\n\r\nconst GifGrid = ({ nameCategory }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( nameCategory );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ nameCategory }</h3>\r\n\r\n            { loading && <Spinner /> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            nameCategory={ nameCategory }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n    nameCategory: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifGrid;","import { useEffect, useState } from 'react';\r\nimport getGifs from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = category => {\r\n\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n    }, [ category ] );\r\n\r\n    return state;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGridItem = ({ title, url, nameCategory }) => {\r\n\r\n    title = ( title.trim() === '' ) ? `${ nameCategory } GIF` : title;\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    nameCategory: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst SkChase = styled.div`\r\n    margin: 0 auto;\r\n    width: 40px;\r\n    height: 40px;\r\n    position: relative;\r\n    animation: sk-chase 2.5s infinite linear both;\r\n\r\n    @keyframes sk-chase {\r\n        100% { transform: rotate(360deg); } \r\n    }\r\n`;\r\n\r\nconst SkChaseDot = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    animation: sk-chase-dot 2.0s infinite ease-in-out both; \r\n\r\n    @keyframes sk-chase-dot {\r\n        80%, 100% { transform: rotate(360deg); } \r\n    }\r\n\r\n    &::before {\r\n        content: '';\r\n        display: block;\r\n        width: 25%;\r\n        height: 25%;\r\n        background-color: #000;\r\n        border-radius: 100%;\r\n        animation: sk-chase-dot-before 2.0s infinite ease-in-out both;\r\n\r\n        @keyframes sk-chase-dot-before {\r\n            50% {\r\n              transform: scale(0.4); \r\n            } 100%, 0% {\r\n              transform: scale(1.0); \r\n            } \r\n        }\r\n    }\r\n\r\n    &:nth-of-type(1) {\r\n        animation-delay: -1.1s;\r\n        &:before { animation-delay: -1.1s; }\r\n    }\r\n\r\n    &:nth-of-type(2) { \r\n        animation-delay: -1.0s;\r\n        &:before { animation-delay: -1.0s; }\r\n    }\r\n\r\n    &:nth-of-type(3) {\r\n        animation-delay: -0.9s;\r\n        &:before { animation-delay: -0.9s; }\r\n    }\r\n    \r\n    &:nth-of-type(4) { \r\n        animation-delay: -0.8s; \r\n        &:before { animation-delay: -0.8s; }\r\n    }\r\n\r\n    &:nth-of-type(5) { \r\n        animation-delay: -0.7s;\r\n        &:before { animation-delay: -0.7s; }\r\n    }\r\n\r\n    &:nth-of-type(6) { \r\n        animation-delay: -0.6s;\r\n        &:before { animation-delay: -0.6s; }\r\n    }\r\n`;\r\n\r\nconst Spinner = () => (\r\n    <SkChase>\r\n        <SkChaseDot></SkChaseDot>\r\n        <SkChaseDot></SkChaseDot>\r\n        <SkChaseDot></SkChaseDot>\r\n        <SkChaseDot></SkChaseDot>\r\n        <SkChaseDot></SkChaseDot>\r\n        <SkChaseDot></SkChaseDot>\r\n    </SkChase>\r\n);\r\n\r\nexport default Spinner;","import React, { useState } from 'react';\r\nimport { AddCategory, GifGrid } from './components';\r\nimport shortid from 'shortid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\tconst [ categories, setCategory ] = useState([{ \r\n\t\tnameCategory: 'One Punch',\r\n\t\tid: shortid.generate()\r\n\t}]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t\r\n\t\t\t<AddCategory\r\n\t\t\t\tcategories={ categories }\r\n\t\t\t\tsetCategory={ setCategory }\r\n\t\t\t/>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<ol>\r\n\t\t\t\t{\r\n\t\t\t\t\tcategories.map( category => (\r\n\t\t\t\t\t\t<GifGrid\r\n\t\t\t\t\t\t\tkey={ category.id }\r\n\t\t\t\t\t\t\t{ ...category }\t\t\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}